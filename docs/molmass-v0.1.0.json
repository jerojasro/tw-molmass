

{"created":"20230727235858761","text":"{\"tiddlers\": {\n\"$:/plugins/jerojasro/molmass/calculatorui\": {\n    \"created\": \"20230728004055903\",\n    \"text\": \"\u003C$edit-text tiddler=\\\"$:/state/plugins/jerojasro/molmass/calc-ui-input\\\" placeholder=\\\"type a formula here, like CH4\\\" tag=\\\"input\\\"/>\\n\\n\u003C$macrocall $name=\\\"molmass\\\" formula={{$:/state/plugins/jerojasro/molmass/calc-ui-input}} verbose=\\\"yes\\\"/>\",\n    \"type\": \"text/vnd.tiddlywiki\",\n    \"title\": \"$:/plugins/jerojasro/molmass/calculatorui\",\n    \"tags\": \"\",\n    \"modified\": \"20230728005327183\"\n},\n\n\"$:/plugins/jerojasro/molmass/doc/interactive-calc\": {\n    \"created\": \"20230730205144910\",\n    \"text\": \"\\\\define newtidactions()\\n\u003C$action-sendmessage $message='tm-new-tiddler'\\ntext='{{$:/plugins/jerojasro/molmass/calculatorui}}'/>\\n\\\\end\\n\\n! Interactive calculator\\n\\n{{$:/plugins/jerojasro/molmass/calculatorui}}\\n\\nIf you want to have this in a tiddler, put the following text on its body: `{{$:/plugins/jerojasro/molmass/calculatorui}}`. Or, just click \u003C$button actions=\u003C\u003Cnewtidactions>>>HERE\u003C/$button> to create a tiddler with the required text.\",\n    \"modified\": \"20230730211011689\",\n    \"title\": \"$:/plugins/jerojasro/molmass/doc/interactive-calc\",\n    \"tags\": \"molmass-docs\",\n    \"caption\": \"Interactive Calc\"\n},\n\n\"$:/plugins/jerojasro/molmass/doc/macro-usage\": {\n    \"created\": \"20230730205651561\",\n    \"text\": \"! Using the macro directly\\n\\nUse the `molmass` macro, and pass to it an string with the molecular formula whose mass you want to calculate.\\n\\nFor example, you can obtain the molecular mass of methane (CH,,4,,), with the following code: `\u003C\u003Cmolmass \\\"CH4\\\">>`, which will yield the result \u003C\u003Cmolmass \\\"CH4\\\">>. If you want to use named arguments for calling the macro, the name you want is `formula`: `\u003C\u003Cmolmass formula:\\\"CH4\\\">>` yields \u003C\u003Cmolmass formula:\\\"CH4\\\">>, same as before.\\n\\nThe results of the calculation are expressed in grams per mol (g / mol).\\n\\nThe plugin supports subformulas, like (CH,,3,,),,2,,SO,,4,,; `\u003C\u003Cmolmass \\\"(CH3)2SO4\\\">>` will yield \u003C\u003Cmolmass \\\"(CH3)2SO4\\\">>.\\n\\nSince the macro returns just a number, you can use it in arithmetic calculations in filters; for example, `\u003C$text text={{{ [\u003Cmolmass 'CH4'>multiply[2]divide[3]] }}} />` (\u003C\u003Cmolmass 'CH4'>> * 2 / 3) yields \u003C$text text={{{ [\u003Cmolmass 'CH4'>multiply[2]divide[3]] }}} />.\\n\\nThis means you can use the macro as a helper in stoichiometry calculations; for example, if you have this reaction: 4NH,,3,, + 5O,,2,, -> 4NO + 6H,,2,,O, and want to know, given 2.5 g of ammonia, how many g of water you'll get, you can write the following: `\u003C$text text={{{ [[2.5]multiply[1]divide\u003Cmolmass \\\"NH3\\\">multiply[6]divide[4]multiply\u003Cmolmass \\\"H2O\\\">divide[1]] }}} />`, and you'll get as result \u003C$text text={{{ [[2.5]multiply[1]divide\u003Cmolmass \\\"NH3\\\">multiply[6]divide[4]multiply\u003Cmolmass \\\"H2O\\\">divide[1]] }}} />\",\n    \"modified\": \"20230730205715061\",\n    \"title\": \"$:/plugins/jerojasro/molmass/doc/macro-usage\",\n    \"tags\": \"molmass-docs\",\n    \"caption\": \"Using the molmass macro\"\n},\n\n\"$:/plugins/jerojasro/molmass/doc/macro-verbose-mode\": {\n    \"created\": \"20230730205803871\",\n    \"text\": \"! Macro verbose mode\\n\\nThe macro accepts an additional argument, `verbose` (allowed values `\\\"yes\\\"` and `\\\"no\\\"` (default)), which will give you a table with detailed information about the atoms in the formula, their amount, the total mass of each of them, and what's their percentage of the total mass. For example, `\u003C\u003Cmolmass \\\"(CH3)2SO4\\\" verbose:\\\"yes\\\">>` will yield the following:\\n\\n\u003C\u003Cmolmass \\\"(CH3)2SO4\\\" verbose:\\\"yes\\\">>\",\n    \"modified\": \"20230730205850107\",\n    \"title\": \"$:/plugins/jerojasro/molmass/doc/macro-verbose-mode\",\n    \"tags\": \"molmass-docs\",\n    \"caption\": \"Macro verbose mode\"\n},\n\n\"$:/plugins/jerojasro/molmass/doc/source-data\": {\n    \"created\": \"20230730205934419\",\n    \"text\": \"! Source data for atomic masses\\n\\nAll the atom masses were sourced from the IUPAC technical report [[Standard atomic weights of the elements 2021|https://www.degruyter.com/document/doi/10.1515/pac-2019-0603/html?lang=en]]. For atoms where that document doesn't list an official mass for an element ---for example, because all of its isotopes are radioactive--- we used the value for the first isotope of each element listed in that document.\",\n    \"modified\": \"20230730205954320\",\n    \"title\": \"$:/plugins/jerojasro/molmass/doc/source-data\",\n    \"tags\": \"molmass-docs\",\n    \"caption\": \"Source data for masses\"\n},\n\n\"$:/plugins/jerojasro/molmass/doc/tw-compat\": {\n    \"created\": \"20230730210017833\",\n    \"text\": \"! TiddlyWiki supported versions\\n\\nThis plugin requires TiddlyWiki version ''5.2.0 or superior'' for using the `molmass` macro inside filter runs (e.g., `[[2.5]multiply\u003Cmolmass \\\"H2SO4\\\">]`).\\n\\nHowever, if you only need the interactive calculator, or using the macro as part of a tiddler's body ---as one normally does---, versions older than 5.2.0 are supported. We tested successfully these functionalities on TW 5.1.22.\",\n    \"title\": \"$:/plugins/jerojasro/molmass/doc/tw-compat\",\n    \"modified\": \"20230730210858158\",\n    \"tags\": \"molmass-docs\",\n    \"caption\": \"Compatible TW versions\"\n},\n\n\"$:/plugins/jerojasro/molmass/history\": {\n    \"created\": \"20230728001017229\",\n    \"text\": \"\\n* ''0.1.0'' -- 2023-07-30 -- initial version\\n\",\n    \"type\": \"text/vnd.tiddlywiki\",\n    \"title\": \"$:/plugins/jerojasro/molmass/history\",\n    \"tags\": \"\",\n    \"modified\": \"20230728001758003\"\n},\n\n\"$:/plugins/jerojasro/molmass/license\": {\n    \"created\": \"20230728001017230\",\n    \"text\": \"TiddlyWiki molmass plugin created by Javier Eduardo Rojas Romero, (jerojasro [at] gmail [dot] com)\\n\\nCopyright (c) 2023 Javier Eduardo Rojas Romero\\n\\n\u003C\u003C\u003C\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n\\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n\\n* Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\u003C\u003C\u003C\",\n    \"type\": \"text/vnd.tiddlywiki\",\n    \"title\": \"$:/plugins/jerojasro/molmass/license\",\n    \"tags\": \"\",\n    \"modified\": \"20230728001653825\"\n},\n\n\"$:/plugins/jerojasro/molmass/macros.js\": {\n    \"created\": \"20230728000837597\",\n    \"text\": \"/*\\\\\\ntitle: $:/plugins/jerojasro/molecularmass/macros.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to calculate the molecular mass of a compound given its molecular formula\\n\\n\\\\*/\\n\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"molmass\\\";\\n\\nexports.params = [\\n    {name: 'formula', 'default': undefined},\\n    {name: 'verbose', 'default': 'no'}\\n];\\n\\nclass DataInputError extends Error {\\n    constructor(message) {\\n        super(message);\\n        this.name = \\\"DATA_INPUT_ERROR\\\";\\n        this.message = message;\\n    };\\n};\\n\\n// taken from https://www.degruyter.com/document/doi/10.1515/pac-2019-0603/html?lang=en\\nconst atomMasses = {\\n    H:    1.0080,\\n    He:   4.0026,\\n    Li:   6.94,\\n    Be:   9.0122,\\n    B:   10.81,\\n    C:   12.011,\\n    N:   14.007,\\n    O:   15.999,\\n    F:   18.998,\\n    Ne:  20.18,\\n    Na:  22.99,\\n    Mg:  24.305,\\n    Al:  26.982,\\n    Si:  28.085,\\n    P:   30.974,\\n    S:   32.06,\\n    Cl:  35.45,\\n    Ar:  39.95,\\n    K:   39.098,\\n    Ca:  40.078,\\n    Sc:  44.956,\\n    Ti:  47.867,\\n    V:   50.942,\\n    Cr:  51.996,\\n    Mn:  54.938,\\n    Fe:  55.845,\\n    Co:  58.933,\\n    Ni:  58.693,\\n    Cu:  63.546,\\n    Zn:  65.38,\\n    Ga:  69.723,\\n    Ge:  72.63,\\n    As:  74.922,\\n    Se:  78.971,\\n    Br:  79.904,\\n    Kr:  83.798,\\n    Rb:  85.468,\\n    Sr:  87.62,\\n    Y:   88.906,\\n    Zr:  91.224,\\n    Nb:  92.906,\\n    Mo:  95.95,\\n    Tc:  96.90636,\\n    Ru: 101.07,\\n    Rh: 102.91,\\n    Pd: 106.42,\\n    Ag: 107.87,\\n    Cd: 112.41,\\n    In: 114.82,\\n    Sn: 118.71,\\n    Sb: 121.76,\\n    Te: 127.6,\\n    I:  126.9,\\n    Xe: 131.29,\\n    Cs: 132.91,\\n    Ba: 137.33,\\n    La: 138.91,\\n    Ce: 140.12,\\n    Pr: 140.91,\\n    Nd: 144.24,\\n    Pm: 144.91276,\\n    Sm: 150.36,\\n    Eu: 151.96,\\n    Gd: 157.25,\\n    Tb: 158.93,\\n    Dy: 162.5,\\n    Ho: 164.93,\\n    Er: 167.26,\\n    Tm: 168.93,\\n    Yb: 173.05,\\n    Lu: 174.97,\\n    Hf: 178.49,\\n    Ta: 180.95,\\n    W:  183.84,\\n    Re: 186.21,\\n    Os: 190.23,\\n    Ir: 192.22,\\n    Pt: 195.08,\\n    Au: 196.97,\\n    Hg: 200.59,\\n    Tl: 204.38,\\n    Pb: 207.2,\\n    Bi: 208.98,\\n    Po: 208.98243,\\n    At: 209.98715,\\n    Rn: 209.98969,\\n    Fr: 211.99623,\\n    Ra: 226.02541,\\n    Ac: 227.02775,\\n    Th: 232.04,\\n    Pa: 231.04,\\n    U: 238.03,\\n    Np: 237.04817,\\n    Pu: 244.06420,\\n    Am: 243.06138,\\n    Cm: 247.07035,\\n    Bk: 247.07031,\\n    Cf: 251.07959,\\n    Es: 252.08298,\\n    Fm: 257.09511,\\n    Md: 258.09843,\\n    No: 259.10100,\\n    Lr: 262.10962,\\n    Rf: 267.12179,\\n    Db: 268.12567,\\n    Sg: 269.12850,\\n    Bh: 270.13337,\\n    Hs: 269.13365,\\n    Mt: 277.15353,\\n    Ds: 281.16455,\\n    Rg: 282.16934,\\n    Cn: 285.17723,\\n    Nh: 285.18011,\\n    Fl: 289.19052,\\n    Mc: 288.19288,\\n    Lv: 291.20101,\\n    Ts: 294.21084,\\n    Og: 294.21398\\n};\\n\\nfunction isDigit(c) {\\n    // preconditions: c is a string\\n    if (typeof(c) !== \\\"string\\\") {\\n        throw new TypeError('not a string, but a ' + typeof(c));\\n    };\\n    // preconditions: c has length 1\\n    if (c.length != 1) {\\n        throw new TypeError('should only get a single character, got ' + c.length);\\n    };\\n\\n    const COD_0 = '0'.charCodeAt(0);\\n    const COD_9 = '9'.charCodeAt(0);\\n\\n    const ccode = c.charCodeAt(0);\\n    if (ccode \u003C COD_0 || ccode > COD_9) {\\n        return false;\\n    };\\n    return true;\\n};\\n\\nfunction isAsciiLower(c) {\\n    // preconditions: c is a string\\n    if (typeof(c) !== \\\"string\\\") {\\n        throw new TypeError('not a string, but a ' + typeof(c));\\n    };\\n    // preconditions: c has length 1\\n    if (c.length != 1) {\\n        throw new TypeError('should only get a single character, got ' + c.length);\\n    };\\n\\n    return c.charCodeAt(0) >= 97 && c.charCodeAt(0) \u003C= 122;\\n};\\n\\nfunction isAsciiUpper(c) {\\n    // preconditions: c is a string\\n    if (typeof(c) !== \\\"string\\\") {\\n        throw new TypeError('not a string, but a ' + typeof(c));\\n    };\\n    // preconditions: c has length 1\\n    if (c.length != 1) {\\n        throw new TypeError('should only get a single character, got ' + c.length);\\n    };\\n\\n    return c.charCodeAt(0) >= 65 && c.charCodeAt(0) \u003C= 90;\\n};\\n\\n// fs: an string that\\n//\\n//   * has at least 1 char\\n//   * starts with A-Z\\n//\\n// returns: The symbol for an element in the periodic table; it's a string of\\n//          length [1, 2]\\n//\\nfunction extractElement(fs) {\\n    // preconditions: fs is a string\\n    if (typeof(fs) !== \\\"string\\\") {\\n        throw new TypeError('not a string, but a ' + typeof(fs));\\n    };\\n    // preconditions: fs has length >= 1\\n    if (fs.length \u003C 1) {\\n        throw new TypeError('should have at least 1 char, but got empty string');\\n    };\\n\\n    // preconditions: fs starts with an uppercase ASCII character\\n    if (!isAsciiUpper(fs[0])) {\\n        throw new TypeError('should have received an uppercase letter, got ' + fs[0]);\\n    };\\n\\n    if (fs.length == 1) {\\n        return fs;\\n    };\\n\\n    const currChar = fs[0];\\n    const nextChar = fs[1];\\n\\n    if (isDigit(nextChar)) {\\n        return currChar;\\n    };\\n\\n    if (isAsciiLower(nextChar)) {\\n        return currChar + nextChar;\\n    };\\n    return currChar;\\n};\\n\\n// returns: a list of two items:\\n//\\n//   * first item: how many characters it \\\"consumed\\\" from the input string\\n//   * second item: the integer value (count) extracted from the string\\n//\\n// if there were no digits at the start of fs, the function will return [0, 1]:\\n// zero characters consumed, and count=1\\nfunction extractCount(fs) {\\n    // preconditions: fs is a string\\n    if (typeof(fs) !== \\\"string\\\") {\\n        throw new TypeError('not a string, but a ' + typeof(fs));\\n    };\\n\\n    var digits = \\\"\\\";\\n    const COD_0 = '0'.charCodeAt(0);\\n    const COD_9 = '9'.charCodeAt(0);\\n    for (var i = 0; i \u003C fs.length; i++) {\\n        const ccode = fs.charCodeAt(i);\\n        if (ccode \u003C COD_0 || ccode > COD_9) {\\n            break;\\n        };\\n        digits += fs[i];\\n    };\\n\\n    if (digits.length == 0) {\\n        return [0, 1];\\n    };\\n\\n    return [i, parseInt(digits, 10)];\\n};\\n\\n// fs starts with some sort of paren: [({\\n//\\n// returns: a 2-item list:\\n//\\n//   * first item: how many characters it consumed from fs\\n//   * second item: an array of ElementCounts, (it's the same signature as\\n//     returned by parseFormula)\\nfunction parseSubFormula(fs) {\\n    // preconditions: fs is a string\\n    if (typeof(fs) !== \\\"string\\\") {\\n        throw new TypeError('not a string, but a ' + typeof(fs));\\n    };\\n\\n    // preconditions: fs has length >= 1\\n    if (fs.length \u003C 1) {\\n        throw new TypeError('should have at least 1 char, but got empty string');\\n    };\\n\\n    const parens = {'{': '}', '[': ']', '(': ')'};\\n\\n    const left = fs[0];\\n    // preconditions: fs starts with an opening parentheses: ({[\\n    if (!(left in parens)) {\\n        throw new TypeError('string should start with paren, starts instead with ' + left);\\n    };\\n\\n    const right = parens[left];\\n    var openParens = 0;\\n    var lastIdx = 0;\\n\\n    for (var i = 0; i \u003C fs.length; i++) {\\n        if (fs[i] == left) {\\n            openParens = openParens + 1;\\n        } else if (fs[i] == right) {\\n            openParens = openParens - 1;\\n        };\\n\\n        if (openParens == 0) {\\n            lastIdx = i;\\n            break;\\n        };\\n    };\\n\\n    if (openParens != 0) {\\n        throw new DataInputError('Unbalanced parens');\\n    };\\n\\n    const subFormulaStr = fs.substring(1, lastIdx);\\n\\n    const subFormula = parseFormula(subFormulaStr, []);\\n    return [lastIdx + 1, subFormula];\\n};\\n\\n// fs starts with either:\\n//\\n// * an Element (One uppercase and optionally one lowercase char)\\n// * a parenthesis: ([{\\n//\\nfunction parseFormula(fs, elems) {\\n    if (fs.length == 0) {\\n        return elems;\\n    }\\n\\n    // TODO check whether all characters are alphanumeric, ASCII only\\n\\n    const parens = {'{': '}', '[': ']', '(': ')'};\\n\\n    var elemOrPolyElem, consumedChars;\\n    var rv;\\n    if (fs[0] in parens) {\\n        [consumedChars, elemOrPolyElem] = parseSubFormula(fs);\\n    } else if (isAsciiUpper(fs[0])) {\\n        elemOrPolyElem = extractElement(fs);\\n        consumedChars = elemOrPolyElem.length;\\n    } else {\\n        throw new DataInputError('Invalid character: ' + fs[0]);\\n    };\\n\\n    fs = fs.substring(consumedChars);\\n\\n    const [charsConsumed, value] = extractCount(fs);\\n    fs = fs.substring(charsConsumed);\\n\\n    elems.push({element: elemOrPolyElem, count: value});\\n    return parseFormula(fs, elems);\\n};\\n\\nfunction molecularMass(formula) {\\n\\n    var atomCount = {};\\n\\n    for (const elemOrIonPart of formula) {\\n        var atoms = [];\\n        if (Array.isArray(elemOrIonPart.element)) {\\n            const [_, ionAtoms] = molecularMass(elemOrIonPart.element);\\n            for (const elem in ionAtoms) {\\n                atoms.push({element: elem, count: ionAtoms[elem]['count'] * elemOrIonPart.count});\\n            }\\n        } else {\\n            atoms.push(elemOrIonPart);\\n        };\\n\\n        for (const elem of atoms) {\\n            if (!(elem.element in atomCount)) {\\n                atomCount[elem.element] = elem.count;\\n            } else {\\n                atomCount[elem.element] = atomCount[elem.element] + elem.count;\\n            };\\n        };\\n    };\\n\\n    var totalMass = 0;\\n    for (const [k, v] of Object.entries(atomCount)) {\\n        if (!(k in atomMasses)) {\\n            throw new DataInputError('Unknown element: ' + k);\\n        };\\n        atomCount[k] = {\\n            count: v,\\n            totalMass: v * atomMasses[k],\\n            atomMass: atomMasses[k]\\n        };\\n        totalMass = totalMass + v * atomMasses[k];\\n    };\\n    for (const k in atomCount) {\\n        atomCount[k]['percentMass'] = 100 * atomCount[k]['totalMass'] / totalMass;\\n    };\\n    return [totalMass, atomCount];\\n};\\n\\nfunction formula2HTML(parsedFormula) {\\n    var tokens = [];\\n    for (const formItem of parsedFormula) {\\n        if (!Array.isArray(formItem.element)) {\\n            tokens.push(formItem.element);\\n        } else {\\n            tokens.push(\\\"(\\\");\\n            tokens.push(formula2HTML(formItem.element));\\n            tokens.push(\\\")\\\");\\n        };\\n\\n        if (formItem.count > 1) {\\n            tokens.push(\\\"\u003Csub>\\\" + formItem.count + \\\"\u003C/sub>\\\");\\n        };\\n    };\\n    return tokens.join('');\\n};\\n\\nfunction asTable(formula, perElemMass, totalMass) {\\n    var rv = \\\"\u003Ctable>\\\";\\n    rv = rv + \\\"\u003Ctr>\\\";\\n    rv = rv + \\\"\u003Cth colspan='5'>\\\" + formula + \\\"\u003C/th>\\\";\\n    rv = rv + \\\"\u003C/tr>\\\";\\n    rv = rv + \\\"\u003Ctr>\\\";\\n    rv = rv + \\\"\u003Cth>Atom\u003C/th>\\\";\\n    rv = rv + \\\"\u003Cth>#\u003C/th>\\\";\\n    rv = rv + \\\"\u003Cth>Atom Mass\u003C/th>\\\";\\n    rv = rv + \\\"\u003Cth>Mass (g)\u003C/th>\\\";\\n    rv = rv + \\\"\u003Cth>Mass %\u003C/th>\\\";\\n    rv = rv + \\\"\u003C/tr>\\\";\\n    for (const [elem, elemData] of Object.entries(perElemMass)) {\\n        rv = rv + \\\"\u003Ctr>\\\";\\n        rv = rv + \\\"\u003Ctd>\\\" + elem + \\\"\u003C/td>\\\";\\n        rv = rv + \\\"\u003Ctd>\\\" + elemData.count + \\\"\u003C/td>\\\";\\n        rv = rv + \\\"\u003Ctd>\\\" + elemData.atomMass + \\\"\u003C/td>\\\";\\n        rv = rv + \\\"\u003Ctd>\\\" + elemData.totalMass.toFixed(3) + \\\"\u003C/td>\\\";\\n        rv = rv + \\\"\u003Ctd>\\\" + elemData.percentMass.toFixed(3) + \\\"%\u003C/td>\\\";\\n        rv = rv + \\\"\u003C/tr>\\\";\\n    };\\n    rv = rv + \\\"\u003Ctr>\\\";\\n    rv = rv + \\\"\u003Cth colspan='3'>Total Mass\u003C/th>\\\";\\n    rv = rv + \\\"\u003Cth>\\\" + totalMass.toFixed(3) + \\\"\u003C/th>\\\";\\n    rv = rv + \\\"\u003Cth>100%\u003C/th>\\\";\\n    rv = rv + \\\"\u003C/tr>\\\";\\n    rv = rv + \\\"\u003C/table>\\\";\\n\\n    return rv;\\n};\\n\\nexports.run = function (formula, verbose) {\\n    let parsedFormula, totalMass, perElemMass;\\n    let errorMessage = \\\"\\\";\\n\\n    // let's do some minimal preprocessing to the received text: remove any sort of whitespace\\n    //\\n    // about the regexp: \\\\s is equivalent to\\n    // [\\\\f\\\\n\\\\r\\\\t\\\\v\\\\u0020\\\\u00a0\\\\u1680\\\\u2000-\\\\u200a\\\\u2028\\\\u2029\\\\u202f\\\\u205f\\\\u3000\\\\ufeff]\\n    // as per\\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\\n    let whitespaceRegexp = /\\\\s+/g;\\n    try {\\n        formula = formula.replace(whitespaceRegexp, \\\"\\\");\\n        parsedFormula = parseFormula(formula, []);\\n        [totalMass, perElemMass] = molecularMass(parsedFormula);\\n    } catch (error) {\\n\\n        // intended error handling: if we are not in verbose mode, just return\\n        // zero and carry on, since we are likely in the middle of some\\n        // arithmetic operation\\n        //\\n        // if we are in verbose mode, return as output the error message; if\\n        // the error was caused by a violation of defined preconditions in any\\n        // function (expressed as raising TypeError), or by any other kind of\\n        // exception, then let the user know that it's not their fault, but\\n        // yours truly the programmer's, by prefixing the message with 'BUG IN\\n        // PLUGIN'\\n\\n        totalMass = 0;\\n        errorMessage = error.message;\\n\\n        if (!(error instanceof DataInputError)) {\\n            // programmer error\\n            errorMessage = \\\"BUG IN PLUGIN: \\\" + errorMessage;\\n        };\\n    };\\n\\n    if (verbose != \\\"yes\\\") {\\n        return totalMass;\\n    };\\n\\n    if (errorMessage == \\\"\\\") {\\n        const prettyFormula = formula2HTML(parsedFormula);\\n        return asTable(prettyFormula, perElemMass, totalMass);\\n    };\\n\\n    return $tw.utils.htmlEncode(errorMessage);\\n};\\n\\n})();\",\n    \"type\": \"application/javascript\",\n    \"title\": \"$:/plugins/jerojasro/molmass/macros.js\",\n    \"tags\": \"\",\n    \"modified\": \"20230730203234152\",\n    \"module-type\": \"macro\"\n},\n\n\"$:/plugins/jerojasro/molmass/readme\": {\n    \"created\": \"20230728001017231\",\n    \"text\": \"\\n!molmass\\n\\nThis plugin provides functionality for calculating the [[molar mass|https://en.wikipedia.org/wiki/Molar_mass]] of a chemical compound, given its molecular formula, and provides a minimal interface for an interactive molar mass calculator.\\n\\nTo install it, drag and drop the following link on your \u003C$text text=\\\"TiddlyWiki\\\"/>: [[$:/plugins/jerojasro/molmass]].\\n\\n\u003C\u003Ctabs tabsList:\\\"[all[shadows]tag[molmass-docs]]\\\" default:\\\"$:/plugins/jerojasro/molmass/doc/interactive-calc\\\" state:\\\"$:/state/plugins/jerojasro/molmass/doctabs\\\">>\",\n    \"type\": \"text/vnd.tiddlywiki\",\n    \"title\": \"$:/plugins/jerojasro/molmass/readme\",\n    \"tags\": \"\",\n    \"modified\": \"20230730223331066\"\n}}\n}","title":"$:/plugins/jerojasro/molmass","type":"application/json","tags":"","modified":"20230730201256281","list":"readme license history","version":"0.1.0","core-version":">=5.2.0","plugin-type":"plugin","packaged-by":"Gatha on 30th July 2023, 17:36:48"}

